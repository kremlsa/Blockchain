type: edu
custom_name: stage5
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Mine.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.concurrent.*;

    public class Mine {
        ExecutorService executor;

        public List<String> messages = new CopyOnWriteArrayList<>();

        public void addMesage (String message) {
            messages.add(message);
        }

        public BlockChain generateChainMT(BlockChain bc, int size, int numberOfZeros) {
            BlockChain candidate = null;
            BlockChain temp = bc;
            numberOfZeros++;

            for (int i = 0; i <= size; i++) {
                candidate = mining(temp, numberOfZeros);
                if (candidate.generationTime > 500) numberOfZeros--;
                else numberOfZeros++;
                synchronized (this) {
                    List<String> mess = new ArrayList<String>(messages.size());
                    for (String s : messages) mess.add(s);
                    candidate.setData(mess);
                    messages.clear();
                }
                temp = candidate;

            }
            return candidate;
        }


        public BlockChain mining(BlockChain block, int numberOfZeros) {
            List<Future<BlockChain>> futures = new ArrayList<>();
            executor = Executors.newFixedThreadPool(4);
            BlockChain candidate = null;

            for (int i = 1; i < 5; i++) {
                futures.add(executor.submit(new MinerThread(block, numberOfZeros, i)));
            }
            boolean isDone = false;
            while (!isDone) {
                for (Future<BlockChain> future : futures) {
                    if (future.isDone()) {
                        try {
                            candidate = future.get();
                            isDone = true;
                            break;
                        } catch (InterruptedException | ExecutionException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            for (Future<BlockChain> future : futures) {
                future.cancel(true);
            }
            executor.shutdownNow();
            return candidate;
        }

    }

    class MinerThread implements Callable<BlockChain> {
        BlockChain block;
        int numbersOfZeros;
        int minerId;

        public MinerThread(BlockChain block, int numbersOfZeros, int minerId){
            this.block = block;
            this.numbersOfZeros = numbersOfZeros;
            this.minerId = minerId;

        }
        @Override
        public BlockChain call() {
            BlockChain result = block.addNext(numbersOfZeros);
            result.setMinerId(minerId);
            return result;
        }

    }
  learner_created: true
- name: src/blockchain/Utils.java
  visible: true
  text: |
    package blockchain;
    import java.io.*;
    import java.security.MessageDigest;
    import java.util.Random;

    public class Utils {

        public static String calchash(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

        public static String[] calcHashMagic(String input, int numbersOfZeros) {
            String[] results = new String[2];
            int magicNumber = 0;
            boolean isDone = false;
            String zeros = "";
            Random random = new Random();
            String hash ="";
            for (int i = 0; i < numbersOfZeros; i++) {
                zeros += "0";
            }
            while (!isDone) {
                magicNumber = random.nextInt(Integer.MAX_VALUE);
                hash = calchash(input + magicNumber);
                if (hash.startsWith(zeros)) {
                    isDone = true;
                }
            }
            results[0] = String.valueOf(magicNumber);
            results[1] = hash;
            return (results);
        }

        public static void saveBlockChain(BlockChain bc) {
            try {
                File file = new File("chain.db");
                FileOutputStream fs = new FileOutputStream(file);
                ObjectOutputStream os = new ObjectOutputStream(fs);
                os.writeObject(bc);
                os.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        public static BlockChain loadBlockChain(String input) {
            BlockChain bc = null;
            try {
                File file = new File(input);
                ObjectInputStream is = new ObjectInputStream(new FileInputStream(file));
                bc = (BlockChain) is.readObject();
                is.close();
            } catch (Exception ex) {
                return null;
            }
            return bc;
        }

    }
  learner_created: true
- name: src/blockchain/MessageGenerator.java
  visible: true
  text: |-
    package blockchain;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class MessageGenerator {
        ExecutorService executor;
        MessageThread sarah;
        MessageThread nick;
        MessageThread tom;

        void start(Mine mine) {
            sarah = new MessageThread("Sarah", mine);
            nick = new MessageThread("Nick", mine);
            tom =new MessageThread("Tom", mine);
            executor = Executors.newFixedThreadPool(4);
            executor.submit(sarah);
            executor.submit(nick);
            executor.submit(tom);
        }

        void stop() {
            sarah.stop();
            nick.stop();
            tom.stop();
            executor.shutdownNow();
        }

    }

    class MessageThread implements Runnable {

        String name;
        Mine mine;
        boolean isRun = true;
        private Random rand = new Random();
        List<String> messages = new ArrayList<>(
                List.of("Hi! I'm here.",

                        "What's up?!",

                        "It's not fair!",

                        "Anyway, thank you for this amazing chat.",

                        "You're welcome :)",

                        "Hey, nice chat!!"));

        public MessageThread (String name, Mine mine) {
            this.name = name;
            this.mine = mine;
        }

        public void addMesage(String name) {
            mine.addMesage(name + " : " + messages.get(rand.nextInt((5 - 1) + 1) + 1));
        }

        void stop() {
            isRun = false;
        }

        @Override
        public void run() {
            while (isRun) {
                addMesage(name);
                try {
                    Thread.sleep(250);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Date;
    import java.util.List;

    public class BlockChain implements Serializable {
        private String name = "Block:";
        private int id;
        long timeStamp;
        long generationTime;
        String magicNumber;
        String hashPrev;
        String hash;
        BlockChain prev = null;
        BlockChain next = null;
        int numbersOfZeros;
        int minerId = 0;
        boolean isRoot = false;
        List<String> data;

        public BlockChain (int id, String hashPrev, int numbersOfZeros, boolean isRoot) {
            this.id = id;
            this.data =  new ArrayList<>();
            this.numbersOfZeros = numbersOfZeros;
            this.timeStamp = new Date().getTime();
            this.hashPrev = hashPrev;
            String forHash = this.name + " " + this.id + " " + this.timeStamp + " " + this.hashPrev;
            long startTime = System.currentTimeMillis();
            this.isRoot = isRoot;
            if (!isRoot) {
                String[] calc = Utils.calcHashMagic(forHash, numbersOfZeros);
                this.magicNumber = calc[0];
                this.hash = calc[1];
            } else {
                this.magicNumber = "0";
                this.hash = "0";
            }
            long endTime = System.currentTimeMillis();
            this.generationTime = (endTime - startTime);
        }

        public void setData(List<String> data) {
            this.data = data;
        }

        public List<String> getData() {
            return data;
        }

        public void setMinerId(int minerId) {
            this.minerId = minerId;
        }

        public int getId() {
            return id;
        }

        public void setPrev(BlockChain prev) {
            this.prev = prev;
        }

        public BlockChain addNext(int numbersOfZeros) {
            BlockChain temp = new BlockChain(id + 1, hash, numbersOfZeros, false);
            temp.setPrev(this);
            this.next = temp;
            return this.next;
        }

        public String deltaZero() {
            String res = "";
            int delta = this.numbersOfZeros - (hasPrev() ? getPrev().numbersOfZeros : this.numbersOfZeros);
            if (delta == 0) {
                res += "N stays the same";
            } else if (delta > 0) {
                res += "N was increased to " + numbersOfZeros;
            } else {
                res += "N was decreased by 1";
            }
            return res;
        }

        public String printBlock() {
            String dataString;
            if (data.isEmpty()) {
                dataString = " no messages\n";
            } else {
                dataString = "\n";
                for (String d : data) {
                    dataString += d;
                    dataString += "\n";
                }
            }
            return name + "\n" +
                    "Created by miner # " + minerId + "\n" +
                    "Id: " + id + "\n" +
                    "Timestamp:" +  timeStamp +"\n" +
                    "Magic number: " + magicNumber + "\n" +
                    "Hash of the previous block:\n" + hashPrev + "\n" +
                    "Hash of the block:\n" + hash + "\n" +
                    "Block data: " + dataString +
                    "Block was generating for " + generationTime + " seconds\n" +
                    deltaZero() + "\n";
        }

        public String printFive() {
            String res = "";
            ArrayList<String> arr = new ArrayList<>();
            BlockChain temp = this;
            if (hasPrev()) {
            for (int i = 0; i < 5; i++) {
                    if (temp.hasPrev()) {
                        temp = temp.getPrev();
                        arr.add(temp.printBlock());
                    }
                }
            }
            Collections.reverse(arr);
            for (String s : arr) {
                res += s + "\n";
            }
            return res;
        }

        public String path() {
            String res = "" + this.id;
            if (hasPrev()) {
                BlockChain temp = getPrev();
                while (temp.hasPrev()) {
                    res += " " + temp.getId();
                    temp = temp.getPrev();
                }
                res += " " + temp.getId();
            }
            return res;
        }

        public BlockChain getPrev() {
            return prev;
        }

        public boolean hasNext() {
            return next != null ? true : false;
        }

        public boolean hasPrev() {
            return prev != null ? true : false;
        }

        public boolean validate() {
            return false;
        }

        public BlockChain getNext() {
            return next;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/275/implement
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 13 Dec 2020 06:27:44 UTC
record: 5
